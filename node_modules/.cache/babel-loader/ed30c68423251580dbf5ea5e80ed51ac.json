{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\React\\\\ZN-Event\\\\ZN-Event-Frontend\\\\src\\\\components\\\\Connexion PopUp\\\\Connexion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport styled from 'styled-components';\nimport { MdClose } from 'react-icons/md';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Background = styled.div`\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n_c = Background;\nconst ModalWrapper = styled.div`\n  width: 800px;\n  height: 500px;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  color: #000;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  position: relative;\n  z-index: 10;\n  border-radius: 10px;\n`;\n_c2 = ModalWrapper;\nconst ModalImg = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: 10px 0 0 10px;\n  background: #000;\n`;\n_c3 = ModalImg;\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  line-height: 1.8;\n  color: #141414;\n\n  p {\n    margin-bottom: 1rem;\n  }\n\n  button {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n  }\n`;\n_c4 = ModalContent;\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`;\n_c5 = CloseModalButton;\nexport const Modal = ({\n  showModal,\n  setShowModal\n}) => {\n  _s();\n\n  const modalRef = useRef();\n  const animation = useSpring({\n    config: {\n      duration: 250\n    },\n    opacity: showModal ? 1 : 0,\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`\n  });\n\n  const closeModal = e => {\n    if (modalRef.current === e.target) {\n      setShowModal(false);\n    }\n  };\n\n  const keyPress = useCallback(e => {\n    if (e.key === 'Escape' && showModal) {\n      setShowModal(false);\n      console.log('I pressed');\n    }\n  }, [setShowModal, showModal]);\n  useEffect(() => {\n    document.addEventListener('keydown', keyPress);\n    return () => document.removeEventListener('keydown', keyPress);\n  }, [keyPress]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showModal ? /*#__PURE__*/_jsxDEV(Background, {\n      onClick: closeModal,\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animation,\n        children: /*#__PURE__*/_jsxDEV(ModalWrapper, {\n          showModal: showModal,\n          children: [/*#__PURE__*/_jsxDEV(ModalImg, {\n            src: require('/images/Animation.jpg'),\n            alt: \"camera\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Are you ready?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Get exclusive access to our next launch.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Join Now\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CloseModalButton, {\n            \"aria-label\": \"Close modal\",\n            onClick: () => setShowModal(prev => !prev)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n};\n\n_s(Modal, \"v+8xQfdHkWl7ocSyEt0s8KDGwZY=\", false, function () {\n  return [useSpring];\n});\n\n_c6 = Modal;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Background\");\n$RefreshReg$(_c2, \"ModalWrapper\");\n$RefreshReg$(_c3, \"ModalImg\");\n$RefreshReg$(_c4, \"ModalContent\");\n$RefreshReg$(_c5, \"CloseModalButton\");\n$RefreshReg$(_c6, \"Modal\");","map":{"version":3,"sources":["D:/Projects/React/ZN-Event/ZN-Event-Frontend/src/components/Connexion PopUp/Connexion.js"],"names":["React","useRef","useEffect","useCallback","useSpring","animated","styled","MdClose","Background","div","ModalWrapper","ModalImg","img","ModalContent","CloseModalButton","Modal","showModal","setShowModal","modalRef","animation","config","duration","opacity","transform","closeModal","e","current","target","keyPress","key","console","log","document","addEventListener","removeEventListener","require","prev"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\nimport styled from 'styled-components';\r\nimport { MdClose } from 'react-icons/md';\r\n\r\nconst Background = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  position: fixed;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst ModalWrapper = styled.div`\r\n  width: 800px;\r\n  height: 500px;\r\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\r\n  background: #fff;\r\n  color: #000;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  position: relative;\r\n  z-index: 10;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst ModalImg = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 10px 0 0 10px;\r\n  background: #000;\r\n`;\r\n\r\nconst ModalContent = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  line-height: 1.8;\r\n  color: #141414;\r\n\r\n  p {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  button {\r\n    padding: 10px 24px;\r\n    background: #141414;\r\n    color: #fff;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst CloseModalButton = styled(MdClose)`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 20px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 0;\r\n  z-index: 10;\r\n`;\r\n\r\nexport const Modal = ({ showModal, setShowModal }) => {\r\n  const modalRef = useRef();\r\n\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 250\r\n    },\r\n    opacity: showModal ? 1 : 0,\r\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`\r\n  });\r\n\r\n  const closeModal = e => {\r\n    if (modalRef.current === e.target) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const keyPress = useCallback(\r\n    e => {\r\n      if (e.key === 'Escape' && showModal) {\r\n        setShowModal(false);\r\n        console.log('I pressed');\r\n      }\r\n    },\r\n    [setShowModal, showModal]\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      document.addEventListener('keydown', keyPress);\r\n      return () => document.removeEventListener('keydown', keyPress);\r\n    },\r\n    [keyPress]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {showModal ? (\r\n        <Background onClick={closeModal} ref={modalRef}>\r\n          <animated.div style={animation}>\r\n            <ModalWrapper showModal={showModal}>\r\n              <ModalImg src={require('/images/Animation.jpg')} alt='camera' />\r\n              <ModalContent>\r\n                <h1>Are you ready?</h1>\r\n                <p>Get exclusive access to our next launch.</p>\r\n                <button>Join Now</button>\r\n              </ModalContent>\r\n              <CloseModalButton\r\n                aria-label='Close modal'\r\n                onClick={() => setShowModal(prev => !prev)}\r\n              />\r\n            </ModalWrapper>\r\n          </animated.div>\r\n        </Background>\r\n      ) : null}\r\n    </>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}